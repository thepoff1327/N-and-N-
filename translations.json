{
    "en": {
        "welcome": "🔢 Welcome to the Expression Set Checker!",
        "description": "This program checks if expressions with 'n' belong to N or N*\nand determines if results are even (2*K) or odd (2*K+1).",
        "choose_language": "Choose your language / Choisissez votre langue / اختر لغتك:\n1. English\n2. Français\n3. العربية",
        "invalid_choice": "❌ Invalid choice. Please enter 1, 2, or 3",
        "choose_set": "Which set do you want to check? Enter 'N' for natural numbers or 'N*' for positive integers: ",
        "invalid_set": "❌ Please enter either 'N' or 'N*'",
        "chose_n": "✅ You chose: N",
        "chose_n_star": "✅ You chose: N*",
        "n_description": "📝 We'll check if expressions belong to N = {0, 1, 2, 3, 4, ...}",
        "n_star_description": "📝 We'll check if expressions belong to N* = {1, 2, 3, 4, 5, ...}",
        "enter_expression": "Enter your expression with 'n' as the unknown (e.g., n*(n+1), 2*n+1) or a single number (e.g., 42, 15/3): ",
        "no_n_variable": "ℹ️ Your expression doesn't contain 'n' - treating as a constant value.",
        "invalid_expression": "❌ Invalid expression. Please use proper mathematical notation. Error: {}",
        "multiplication_tip": "💡 Tip: Use * for multiplication (e.g., 25*n*(n+5)) and / for division (e.g., n/2, 15/3)",
        "expression_parsed": "✅ Expression parsed: {}",
        "analyzing": "📊 Analyzing expression for {}...",
        "analyzing_constant": "📊 Analyzing constant value...",
        "symbolic_analysis": "🔍 SYMBOLIC ANALYSIS",
        "constant_analysis": "🔍 CONSTANT ANALYSIS",
        "original": "Original: {}",
        "expanded": "Expanded: {}",
        "simplified": "Simplified: {}",
        "constant_value": "Value: {}",
        "set_membership": "📈 SET MEMBERSHIP ANALYSIS:",
        "constant_evaluation": "📊 Constant evaluation:",
        "could_not_evaluate": "⚠️ Could not evaluate for n={}: {}",
        "sample_evaluations": "📊 Sample evaluations:",
        "found_problems": "⚠️ Found values where expression doesn't belong to {}:",
        "appears_to_belong": "✅ Expression appears to belong to {} for tested values!",
        "parity_analysis": "🎯 EVEN/ODD ANALYSIS (2*K vs 2*K+1):",
        "even": "2*K (even)",
        "odd": "2*K+1 (odd)",
        "prime": "🔢 {} is PRIME!",
        "composite": "🔢 {} is composite",
        "non_integer": "(non-integer result)",
        "pattern_summary": "📈 PATTERN SUMMARY:",
        "produces_both": "🔄 Expression produces BOTH even and odd results",
        "produces_even": "✅ Expression produces only EVEN results (2*K form)",
        "produces_odd": "✅ Expression produces only ODD results (2*K+1 form)",
        "pattern_unclear": "❓ Pattern unclear from tested values",
        "mod_expression": "📐 Expression mod 2: {}",
        "always_even": "🎯 CONCLUSION: Expression is ALWAYS EVEN (2*K form)",
        "always_odd": "🎯 CONCLUSION: Expression is ALWAYS ODD (2*K+1 form)",
        "depends_on_n": "🎯 CONCLUSION: Parity depends on the value of n",
        "could_not_determine": "⚠️ Could not determine symbolic parity: {}",
        "test_specific": "🧪 Would you like to test specific values of n?",
        "yes_no": "Enter 'y' for yes or 'n' for no: ",
        "specific_testing": "🔬 SPECIFIC VALUE TESTING",
        "note_range": "Note: For {}, n should be ≥ {}",
        "enter_n_value": "Enter a value for n (or 'done' to finish): ",
        "warning_not_in_set": "⚠️ Warning: n = {} is not in {} (should be ≥ {})",
        "result_for_n": "📊 RESULT for n = {}:",
        "set_membership_result": "Set membership: {}",
        "belongs_to_n": "✅ belongs to N",
        "not_belongs_to_n": "❌ does NOT belong to N",
        "belongs_to_n_star": "✅ belongs to N*",
        "not_belongs_to_n_star": "❌ does NOT belong to N*",
        "parity_even": "Parity: EVEN (2*K form, where K = {})",
        "parity_odd": "Parity: ODD (2*K+1 form, where K = {})",
        "parity_na": "Parity: Not applicable (non-integer result)",
        "prime_analysis": "🔢 PRIME: {} is a prime number!",
        "prime_divisors": "📊 Prime divisors: 1, {}",
        "composite_analysis": "🔢 COMPOSITE: {} is not prime",
        "all_divisors": "📊 All divisors: {}",
        "neither_prime": "🔢 NEITHER: 1 is neither prime nor composite",
        "divisors_one": "📊 Divisors: [1]",
        "prime_na": "🔢 N/A: Prime analysis only applies to positive integers",
        "prime_na_non_integer": "🔢 Prime analysis: Not applicable (non-integer result)",
        "enter_valid_number": "❌ Please enter a valid number or 'done'",
        "error_evaluating": "❌ Error evaluating expression: {}",
        "analysis_complete": "🎉 Analysis complete! Thank you for using the Expression Set Checker!",
        "interrupted": "👋 Program interrupted. Goodbye!",
        "unexpected_error": "❌ An unexpected error occurred: {}",
        "restart_program": "Please restart the program and try again."
    },
    "fr": {
        "welcome": "🔢 Bienvenue dans le Vérificateur d'Expressions d'Ensembles!",
        "description": "Ce programme vérifie si les expressions avec 'n' appartiennent à N ou N*\net détermine si les résultats sont pairs (2*K) ou impairs (2*K+1).",
        "choose_language": "Choose your language / Choisissez votre langue / اختر لغتك:\n1. English\n2. Français\n3. العربية",
        "invalid_choice": "❌ Choix invalide. Veuillez entrer 1, 2, ou 3",
        "choose_set": "Quel ensemble voulez-vous vérifier? Entrez 'N' pour les nombres naturels ou 'N*' pour les entiers positifs: ",
        "invalid_set": "❌ Veuillez entrer soit 'N' soit 'N*'",
        "chose_n": "✅ Vous avez choisi: N",
        "chose_n_star": "✅ Vous avez choisi: N*",
        "n_description": "📝 Nous vérifierons si les expressions appartiennent à N = {0, 1, 2, 3, 4, ...}",
        "n_star_description": "📝 Nous vérifierons si les expressions appartiennent à N* = {1, 2, 3, 4, 5, ...}",
        "enter_expression": "Entrez votre expression avec 'n' comme inconnue (ex: n*(n+1), 2*n+1) ou un nombre seul (ex: 42, 15/3): ",
        "no_n_variable": "ℹ️ Votre expression ne contient pas 'n' - traitée comme une valeur constante.",
        "invalid_expression": "❌ Expression invalide. Veuillez utiliser une notation mathématique correcte. Erreur: {}",
        "multiplication_tip": "💡 Astuce: Utilisez * pour la multiplication (ex: 25*n*(n+5)) et / pour la division (ex: n/2, 15/3)",
        "expression_parsed": "✅ Expression analysée: {}",
        "analyzing": "📊 Analyse de l'expression pour {}...",
        "analyzing_constant": "📊 Analyse de la valeur constante...",
        "symbolic_analysis": "🔍 ANALYSE SYMBOLIQUE",
        "constant_analysis": "🔍 ANALYSE CONSTANTE",
        "original": "Original: {}",
        "expanded": "Développé: {}",
        "simplified": "Simplifié: {}",
        "constant_value": "Valeur: {}",
        "set_membership": "📈 ANALYSE D'APPARTENANCE À L'ENSEMBLE:",
        "constant_evaluation": "📊 Évaluation constante:",
        "could_not_evaluate": "⚠️ Impossible d'évaluer pour n={}: {}",
        "sample_evaluations": "📊 Évaluations d'exemple:",
        "found_problems": "⚠️ Valeurs trouvées où l'expression n'appartient pas à {}:",
        "appears_to_belong": "✅ L'expression semble appartenir à {} pour les valeurs testées!",
        "parity_analysis": "🎯 ANALYSE PAIR/IMPAIR (2*K vs 2*K+1):",
        "even": "2*K (pair)",
        "odd": "2*K+1 (impair)",
        "prime": "🔢 {} est PREMIER!",
        "composite": "🔢 {} est composé",
        "non_integer": "(résultat non-entier)",
        "pattern_summary": "📈 RÉSUMÉ DU MOTIF:",
        "produces_both": "🔄 L'expression produit des résultats PAIRS ET IMPAIRS",
        "produces_even": "✅ L'expression produit seulement des résultats PAIRS (forme 2*K)",
        "produces_odd": "✅ L'expression produit seulement des résultats IMPAIRS (forme 2*K+1)",
        "pattern_unclear": "❓ Motif peu clair à partir des valeurs testées",
        "mod_expression": "📐 Expression mod 2: {}",
        "always_even": "🎯 CONCLUSION: L'expression est TOUJOURS PAIRE (forme 2*K)",
        "always_odd": "🎯 CONCLUSION: L'expression est TOUJOURS IMPAIRE (forme 2*K+1)",
        "depends_on_n": "🎯 CONCLUSION: La parité dépend de la valeur de n",
        "could_not_determine": "⚠️ Impossible de déterminer la parité symbolique: {}",
        "test_specific": "🧪 Voulez-vous tester des valeurs spécifiques de n?",
        "yes_no": "Entrez 'o' pour oui ou 'n' pour non: ",
        "specific_testing": "🔬 TEST DE VALEURS SPÉCIFIQUES",
        "note_range": "Note: Pour {}, n devrait être ≥ {}",
        "enter_n_value": "Entrez une valeur pour n (ou 'fini' pour terminer): ",
        "warning_not_in_set": "⚠️ Attention: n = {} n'est pas dans {} (devrait être ≥ {})",
        "result_for_n": "📊 RÉSULTAT pour n = {}:",
        "set_membership_result": "Appartenance à l'ensemble: {}",
        "belongs_to_n": "✅ appartient à N",
        "not_belongs_to_n": "❌ n'appartient PAS à N",
        "belongs_to_n_star": "✅ appartient à N*",
        "not_belongs_to_n_star": "❌ n'appartient PAS à N*",
        "parity_even": "Parité: PAIR (forme 2*K, où K = {})",
        "parity_odd": "Parité: IMPAIR (forme 2*K+1, où K = {})",
        "parity_na": "Parité: Non applicable (résultat non-entier)",
        "prime_analysis": "🔢 PREMIER: {} est un nombre premier!",
        "prime_divisors": "📊 Diviseurs premiers: 1, {}",
        "composite_analysis": "🔢 COMPOSÉ: {} n'est pas premier",
        "all_divisors": "📊 Tous les diviseurs: {}",
        "neither_prime": "🔢 NI L'UN NI L'AUTRE: 1 n'est ni premier ni composé",
        "divisors_one": "📊 Diviseurs: [1]",
        "prime_na": "🔢 N/A: L'analyse des nombres premiers ne s'applique qu'aux entiers positifs",
        "prime_na_non_integer": "🔢 Analyse des nombres premiers: Non applicable (résultat non-entier)",
        "enter_valid_number": "❌ Veuillez entrer un nombre valide ou 'fini'",
        "error_evaluating": "❌ Erreur lors de l'évaluation de l'expression: {}",
        "analysis_complete": "🎉 Analyse terminée! Merci d'avoir utilisé le Vérificateur d'Expressions d'Ensembles!",
        "interrupted": "👋 Programme interrompu. Au revoir!",
        "unexpected_error": "❌ Une erreur inattendue s'est produite: {}",
        "restart_program": "Veuillez redémarrer le programme et réessayer."
    },
    "ar": {
        "welcome": "🔢 مرحباً بك في فاحص تعبيرات المجموعات!",
        "description": "هذا البرنامج يتحقق من انتماء التعبيرات التي تحتوي على 'n' إلى N أو N*\nويحدد ما إذا كانت النتائج زوجية (2*K) أم فردية (2*K+1).",
        "choose_language": "Choose your language / Choisissez votre langue / اختر لغتك:\n1. English\n2. Français\n3. العربية",
        "invalid_choice": "❌ اختيار غير صحيح. الرجاء إدخال 1 أو 2 أو 3",
        "choose_set": "أي مجموعة تريد فحصها؟ أدخل 'N' للأعداد الطبيعية أو 'N*' للأعداد الصحيحة الموجبة: ",
        "invalid_set": "❌ الرجاء إدخال 'N' أو 'N*'",
        "chose_n": "✅ اخترت: N",
        "chose_n_star": "✅ اخترت: N*",
        "n_description": "📝 سنتحقق من انتماء التعبيرات إلى N = {0, 1, 2, 3, 4, ...}",
        "n_star_description": "📝 سنتحقق من انتماء التعبيرات إلى N* = {1, 2, 3, 4, 5, ...}",
        "enter_expression": "أدخل تعبيرك مع 'n' كمتغير مجهول (مثال: n*(n+1), 2*n+1) أو رقم واحد (مثال: 42, 15/3): ",
        "no_n_variable": "ℹ️ تعبيرك لا يحتوي على 'n' - سيُعامل كقيمة ثابتة.",
        "invalid_expression": "❌ تعبير غير صحيح. الرجاء استخدام رموز رياضية صحيحة. خطأ: {}",
        "multiplication_tip": "💡 نصيحة: استخدم * للضرب (مثال: 25*n*(n+5)) و / للقسمة (مثال: n/2, 15/3)",
        "expression_parsed": "✅ تم تحليل التعبير: {}",
        "analyzing": "📊 تحليل التعبير لـ {}...",
        "analyzing_constant": "📊 تحليل القيمة الثابتة...",
        "symbolic_analysis": "🔍 التحليل الرمزي",
        "constant_analysis": "🔍 تحليل ثابت",
        "original": "الأصلي: {}",
        "expanded": "الموسع: {}",
        "simplified": "المبسط: {}",
        "constant_value": "القيمة: {}",
        "set_membership": "📈 تحليل الانتماء للمجموعة:",
        "constant_evaluation": "📊 تقييم ثابت:",
        "could_not_evaluate": "⚠️ لا يمكن تقييم n={}: {}",
        "sample_evaluations": "📊 تقييمات عينة:",
        "found_problems": "⚠️ وُجدت قيم حيث التعبير لا ينتمي إلى {}:",
        "appears_to_belong": "✅ يبدو أن التعبير ينتمي إلى {} للقيم المختبرة!",
        "parity_analysis": "🎯 تحليل الزوجي/الفردي (2*K مقابل 2*K+1):",
        "even": "2*K (زوجي)",
        "odd": "2*K+1 (فردي)",
        "prime": "🔢 {} عدد أولي!",
        "composite": "🔢 {} عدد مركب",
        "non_integer": "(نتيجة غير صحيحة)",
        "pattern_summary": "📈 ملخص النمط:",
        "produces_both": "🔄 التعبير ينتج نتائج زوجية وفردية",
        "produces_even": "✅ التعبير ينتج نتائج زوجية فقط (شكل 2*K)",
        "produces_odd": "✅ التعبير ينتج نتائج فردية فقط (شكل 2*K+1)",
        "pattern_unclear": "❓ النمط غير واضح من القيم المختبرة",
        "mod_expression": "📐 التعبير mod 2: {}",
        "always_even": "🎯 الخلاصة: التعبير زوجي دائماً (شكل 2*K)",
        "always_odd": "🎯 الخلاصة: التعبير فردي دائماً (شكل 2*K+1)",
        "depends_on_n": "🎯 الخلاصة: الزوجية تعتمد على قيمة n",
        "could_not_determine": "⚠️ لا يمكن تحديد الزوجية الرمزية: {}",
        "test_specific": "🧪 هل تريد اختبار قيم محددة لـ n؟",
        "yes_no": "أدخل 'ن' لنعم أو 'ل' للا: ",
        "specific_testing": "🔬 اختبار قيم محددة",
        "note_range": "ملاحظة: لـ {}، يجب أن تكون n ≥ {}",
        "enter_n_value": "أدخل قيمة لـ n (أو 'انتهى' للإنهاء): ",
        "warning_not_in_set": "⚠️ تحذير: n = {} ليست في {} (يجب أن تكون ≥ {})",
        "result_for_n": "📊 النتيجة لـ n = {}:",
        "set_membership_result": "الانتماء للمجموعة: {}",
        "belongs_to_n": "✅ ينتمي إلى N",
        "not_belongs_to_n": "❌ لا ينتمي إلى N",
        "belongs_to_n_star": "✅ ينتمي إلى N*",
        "not_belongs_to_n_star": "❌ لا ينتمي إلى N*",
        "parity_even": "الزوجية: زوجي (شكل 2*K، حيث K = {})",
        "parity_odd": "الزوجية: فردي (شكل 2*K+1، حيث K = {})",
        "parity_na": "الزوجية: غير قابل للتطبيق (نتيجة غير صحيحة)",
        "prime_analysis": "🔢 أولي: {} عدد أولي!",
        "prime_divisors": "📊 القواسم الأولية: 1، {}",
        "composite_analysis": "🔢 مركب: {} ليس أولياً",
        "all_divisors": "📊 جميع القواسم: {}",
        "neither_prime": "🔢 لا هذا ولا ذاك: 1 ليس أولياً ولا مركباً",
        "divisors_one": "📊 القواسم: [1]",
        "prime_na": "🔢 غير قابل للتطبيق: تحليل الأعداد الأولية ينطبق فقط على الأعداد الصحيحة الموجبة",
        "prime_na_non_integer": "🔢 تحليل الأعداد الأولية: غير قابل للتطبيق (نتيجة غير صحيحة)",
        "enter_valid_number": "❌ الرجاء إدخال رقم صحيح أو 'انتهى'",
        "error_evaluating": "❌ خطأ في تقييم التعبير: {}",
        "analysis_complete": "🎉 اكتمل التحليل! شكراً لاستخدام فاحص تعبيرات المجموعات!",
        "interrupted": "👋 تم إيقاف البرنامج. وداعاً!",
        "unexpected_error": "❌ حدث خطأ غير متوقع: {}",
        "restart_program": "الرجاء إعادة تشغيل البرنامج والمحاولة مرة أخرى."
    }
}